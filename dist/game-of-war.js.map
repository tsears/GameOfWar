{"version":3,"sources":["webpack:///webpack/bootstrap 29202c1763b904025bfe","webpack:///./js/war.js","webpack:///./js/WarGame.js","webpack:///./js/Player.js","webpack:///./js/RoundResult.js","webpack:///./js/Deck.js","webpack:///./js/Card.js"],"names":["War","numSuits","numRanks","numPlayers","_numSuits","_numRanks","_numPlayers","_warGame","CardAwardMethod","WarGame","deck","distributionMethod","Increasing","_deck","_players","_playerCount","_distributionMethod","currentSize","Error","i","push","_startGame","player","pIndex","result","indicies","map","p","_resolveRound","_distributeCards","warringPlayers","draw","_draw","max","_findCardWithMaxValue","atWar","filter","c","rank","length","war","warringPlayerIndicies","_getWarringPlayerIndicies","_prepForWar","winner","indexOf","_finishRound","_awardCards","draws","_gameIsOver","gameOver","revealCard","j","playerIndex","cardCount","players","warVal","cards","reduce","a","b","_awardCardsIncreasing","Shuffled","_awardCardsShuffled","awardCard","tempDeck","add","shuffle","deal","numPasses","Math","floor","addCard","Player","name","_name","_cards","card","unshift","pop","RoundResult","_draws","_war","_winner","_gameOver","v","Deck","_initialSize","newOrder","oldOrder","slice","randomIndex","random","randomCard","splice","Card","suit","_suit","_rank"],"mappings":"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","file":"game-of-war.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 29202c1763b904025bfe","import WarGame from './WarGame';\nimport Deck from './Deck';\n\nexport default class War {\n  constructor(numSuits, numRanks, numPlayers) {\n    // I would inject the deck as a dependency, so this class is just going to\n    // wrap another class that does....\n    this._numSuits = numSuits;\n    this._numRanks = numRanks;\n    this._numPlayers = numPlayers;\n\n    this._warGame = new WarGame(new Deck(this._numSuits, this._numRanks), this._numPlayers);\n  }\n\n  get game() { return this._warGame; }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/war.js","import Player from './Player';\nimport RoundResult from './RoundResult';\nimport Deck from './Deck';\n\nexport const CardAwardMethod = {\n  \"Increasing\" : 0,\n  \"Shuffled\" : 1\n}\n\nexport default class WarGame {\n  constructor(deck, numPlayers, distributionMethod = CardAwardMethod.Increasing) {\n    this._deck = deck;\n    this._numPlayers = numPlayers;\n    this._players = [];\n    this._playerCount = 0;\n    this._distributionMethod = distributionMethod;\n\n    if (deck.currentSize < numPlayers) {\n      throw new Error('Deck must at least the same size as the number of players');\n    }\n\n    for (let i = 1; i <= numPlayers; ++i) {\n      this._players.push(new Player(`Player ${i}`));\n      ++this._playerCount;\n    }\n\n    this._startGame();\n  }\n\n  get deck() { return this._deck; }\n  get playerCount() { return this._playerCount; }\n\n  getPlayer(player) {\n    // players are not zero indexed... didn't want to do that jujitsu from the\n    // consumer.\n    const pIndex = player - 1;\n    return this._players[pIndex];\n  }\n\n  playRound() {\n    const result = new RoundResult();\n    const indicies = this._players.map((p, i) => { return i; });\n\n    return this._resolveRound(indicies, result);\n  }\n\n  _startGame() {\n    this._distributeCards();\n  }\n\n\n  /*****************************************************************************\n  * _resolveRound\n  *\n  * This is where all the magic happens.  We will recursively determine the outcome\n  * of the round.  If the draws result in a war, we will keep calling this function\n  * until all wars are resolved.  A complete record of the draws will be returned\n  * along with the winner\n  *****************************************************************************/\n\n  _resolveRound(warringPlayers, result) {\n\n    const draw = this._draw(warringPlayers, result);\n    const max = this._findCardWithMaxValue(draw);\n    const atWar = draw.filter(c => c && c.rank === max.rank).length > 1;\n\n    if (atWar) {\n      result.war = true;\n\n      const warringPlayerIndicies = this._getWarringPlayerIndicies(draw, warringPlayers, max);\n\n      this._prepForWar(draw, warringPlayerIndicies, result);\n\n      return this._resolveRound(warringPlayerIndicies, result);\n    } else {\n      // break recursion\n      let winner = this._players[warringPlayers[draw.indexOf(max)]]; //object equality....\n\n      return this._finishRound(winner, draw, result);\n    }\n  }\n\n  _prepForWar(draw, warringPlayerIndicies, result) {\n    this._draw(warringPlayerIndicies, result);\n  }\n\n  _finishRound(winner, draw, result) {\n    if (!winner) {\n      result.winner = null;\n    } else {\n      result.winner = winner;\n      this._awardCards(result.draws, winner);\n    }\n\n    if (this._gameIsOver()) {\n      result.gameOver = true;\n    }\n\n    return result;\n  }\n\n  _draw(warringPlayers, result) {\n    const draw = warringPlayers.map(i => { return this._players[i].revealCard(); });\n\n    for(let j = 0; j < warringPlayers.length; ++j) {\n      const playerIndex = warringPlayers[j];\n\n      if (!result.draws[playerIndex]) { result.draws[playerIndex] = []; }\n      result.draws[playerIndex].push(draw[j]);\n    }\n\n    return draw;\n  }\n\n  /*****************************************************************************\n  * _gameIsOver\n  *\n  * The game is over when one player has all *available cards* -- if the deck\n  * wasn't evenly divisible by the number of players, then excess cards would\n  * have been left on the deck, making a strict \"a player has all the cards in\n  * the deck\" impossible.\n  ******************************************************************************/\n\n  _gameIsOver() {\n    return this._players.filter(p => p.cardCount === 0).length === this._numPlayers - 1;\n  }\n\n  _getWarringPlayerIndicies(draw, players, warVal) {\n    const indicies = [];\n    for (let i = 0; i < draw.length; i++) {\n      if (draw[i] && draw[i].rank === warVal.rank) {\n        indicies.push(players[i]);\n      }\n    }\n\n    return indicies;\n  }\n\n  _findCardWithMaxValue(cards) {\n    return cards.filter(c => c).reduce((a, b) => {\n      // a is the value of the element we're looking at,\n      // b is the value of the previous max\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Parameters\n      return b.rank > a.rank ? b : a;\n    }, {rank: 0});\n  }\n\n  _awardCards(draws, winner) {\n    if (this._distributionMethod === CardAwardMethod.Increasing) {\n      this._awardCardsIncreasing(draws, winner);\n    } else if (this._distributionMethod === CardAwardMethod.Shuffled) {\n      this._awardCardsShuffled(draws, winner);\n    }\n  }\n\n  _awardCardsIncreasing(draws, winner) {\n    for(let i = 0; i < draws.length; ++i) {\n      for (let j = 0; j < draws[i].length; ++j) {\n        if(draws[i][j]) {\n          winner.awardCard(draws[i][j]);\n        }\n      }\n    }\n  }\n\n  _awardCardsShuffled(draws, winner) {\n    const tempDeck = new Deck(0,0);\n    for(let i = 0; i < draws.length; ++i) {\n      for (let j = 0; j < draws[i].length; ++j) {\n        if(draws[i][j]) {\n          tempDeck.add(draws[i][j]);\n        }\n      }\n    }\n\n    tempDeck.shuffle();\n\n    while(tempDeck.currentSize > 0) {\n      winner.awardCard(tempDeck.deal());\n    }\n  }\n\n  _distributeCards() {\n    this._deck.shuffle();\n\n    let numPasses = Math.floor(this._deck.currentSize / this._numPlayers);\n\n    while(numPasses > 0) {\n      for (let i = 0; i < this._numPlayers; ++i) {\n        this._players[i].addCard(this._deck.deal());\n      }\n      --numPasses;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/WarGame.js","export default class Player {\n  constructor(name) {\n    this._name = name;\n    this._cards = [];\n  }\n\n  get cardCount() { return this._cards.length; }\n  get score() { return this._cards.length; }\n  get name() { return this._name; }\n\n  addCard(card) {\n    this._cards.push(card);\n  }\n\n  awardCard(card) {\n    this._cards.unshift(card);\n  }\n\n  revealCard() {\n    return this._cards.pop();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/Player.js","export default class RoundResult {\n  constructor() {\n    this._draws = [];\n    this._war = false;\n    this._winner = null;\n    this._gameOver = false;\n  }\n\n  get draws() { return this._draws; }\n\n  get war() { return this._war; }\n  set war(v) { this._war = v; }\n\n  get winner() { return this._winner; }\n  set winner(v) { this._winner = v; }\n\n  get gameOver() { return this._gameOver; }\n  set gameOver(v) { this._gameOver = v; }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/RoundResult.js","import Card from './Card';\n\nexport default class Deck {\n  constructor(numSuits, numRanks) {\n    this._numSuits = numSuits;\n    this._numRanks = numRanks;\n    this._cards = [];\n    this._initialSize = 0; // yes, this is just suits * ranks. but we'll count for fun\n\n    for (let i = 1; i <= numSuits; ++i) {\n      for (let j = 1; j <= numRanks; ++j) {\n        ++this._initialSize;\n        this._cards.push(new Card(i, j));\n      }\n    }\n  }\n\n  get numSuits() { return this._numSuits; }\n  get numRanks() { return this._numRanks; }\n  get currentSize() { return this._cards.length; }\n  get initialSize() { return this._initialSize; }\n\n  deal() {\n    return this._cards.pop(); //LIFO\n  }\n\n  add(card) {\n    return this._cards.push(card);\n  }\n\n  shuffle() {\n    let newOrder = [];\n    let oldOrder = this._cards.slice(); // we will leave the initial ordering in tact until the shuffle is complete...\n\n    do {\n      let randomIndex = Math.floor(Math.random() * oldOrder.length);\n      let randomCard = oldOrder.splice(randomIndex, 1)[0];\n      newOrder.push(randomCard);\n    } while(oldOrder.length > 0);\n\n    this._cards = newOrder;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/Deck.js","export default class Card {\n  constructor(suit, rank) {\n    this._suit = suit;\n    this._rank = rank;\n  }\n\n  get suit() {\n    return this._suit;\n  }\n\n  get rank() {\n    return this._rank;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/Card.js"],"sourceRoot":""}